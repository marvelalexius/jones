// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/marvelalexius/jones/model"
	mock "github.com/stretchr/testify/mock"
)

// ISubscriptionRepository is an autogenerated mock type for the ISubscriptionRepository type
type ISubscriptionRepository struct {
	mock.Mock
}

// BulkCreatePlan provides a mock function with given fields: subsPlan
func (_m *ISubscriptionRepository) BulkCreatePlan(subsPlan []model.SubscriptionPlan) error {
	ret := _m.Called(subsPlan)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreatePlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.SubscriptionPlan) error); ok {
		r0 = rf(subsPlan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, subscription
func (_m *ISubscriptionRepository) Create(ctx context.Context, subscription model.Subscription) error {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Subscription) error); ok {
		r0 = rf(ctx, subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ISubscriptionRepository) FindAll(ctx context.Context) ([]model.Subscription, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Subscription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Subscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllPlan provides a mock function with given fields: ctx
func (_m *ISubscriptionRepository) FindAllPlan(ctx context.Context) ([]model.SubscriptionPlan, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPlan")
	}

	var r0 []model.SubscriptionPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.SubscriptionPlan, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.SubscriptionPlan); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SubscriptionPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ISubscriptionRepository) FindByID(ctx context.Context, id string) (*model.Subscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Subscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Subscription); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStripeSubscriptionID provides a mock function with given fields: ctx, id
func (_m *ISubscriptionRepository) FindByStripeSubscriptionID(ctx context.Context, id string) (*model.Subscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByStripeSubscriptionID")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Subscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Subscription); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStripeSubscriptionIDAndPlanID provides a mock function with given fields: ctx, id, planID
func (_m *ISubscriptionRepository) FindByStripeSubscriptionIDAndPlanID(ctx context.Context, id string, planID int) (*model.Subscription, error) {
	ret := _m.Called(ctx, id, planID)

	if len(ret) == 0 {
		panic("no return value specified for FindByStripeSubscriptionIDAndPlanID")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (*model.Subscription, error)); ok {
		return rf(ctx, id, planID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *model.Subscription); ok {
		r0 = rf(ctx, id, planID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, id, planID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *ISubscriptionRepository) FindByUserID(ctx context.Context, userID string) (*model.Subscription, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Subscription, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Subscription); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPlanByID provides a mock function with given fields: ctx, id
func (_m *ISubscriptionRepository) FindPlanByID(ctx context.Context, id int) (*model.SubscriptionPlan, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindPlanByID")
	}

	var r0 *model.SubscriptionPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.SubscriptionPlan, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.SubscriptionPlan); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SubscriptionPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPlanByProductID provides a mock function with given fields: ctx, id
func (_m *ISubscriptionRepository) FindPlanByProductID(ctx context.Context, id string) (*model.SubscriptionPlan, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindPlanByProductID")
	}

	var r0 *model.SubscriptionPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.SubscriptionPlan, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.SubscriptionPlan); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SubscriptionPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, subscription
func (_m *ISubscriptionRepository) Update(ctx context.Context, subscription *model.Subscription) error {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Subscription) error); ok {
		r0 = rf(ctx, subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISubscriptionRepository creates a new instance of ISubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISubscriptionRepository {
	mock := &ISubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
