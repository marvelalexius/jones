// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/marvelalexius/jones/model"
	mock "github.com/stretchr/testify/mock"
)

// IReactionRepository is an autogenerated mock type for the IReactionRepository type
type IReactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, reaction
func (_m *IReactionRepository) Create(ctx context.Context, reaction model.Reaction) error {
	ret := _m.Called(ctx, reaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Reaction) error); ok {
		r0 = rf(ctx, reaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindLikes provides a mock function with given fields: ctx, userID
func (_m *IReactionRepository) FindLikes(ctx context.Context, userID string) ([]model.Reaction, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindLikes")
	}

	var r0 []model.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Reaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Reaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Reaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMatch provides a mock function with given fields: ctx, userID, matchedUserID
func (_m *IReactionRepository) FindMatch(ctx context.Context, userID string, matchedUserID string) (model.Reaction, error) {
	ret := _m.Called(ctx, userID, matchedUserID)

	if len(ret) == 0 {
		panic("no return value specified for FindMatch")
	}

	var r0 model.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.Reaction, error)); ok {
		return rf(ctx, userID, matchedUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.Reaction); ok {
		r0 = rf(ctx, userID, matchedUserID)
	} else {
		r0 = ret.Get(0).(model.Reaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, matchedUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSwipeCount provides a mock function with given fields: ctx, userID
func (_m *IReactionRepository) FindSwipeCount(ctx context.Context, userID string) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindSwipeCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSwiped provides a mock function with given fields: ctx, userID
func (_m *IReactionRepository) FindSwiped(ctx context.Context, userID string) ([]model.Reaction, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindSwiped")
	}

	var r0 []model.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Reaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Reaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Reaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasSwiped provides a mock function with given fields: ctx, userID, matchedUserID
func (_m *IReactionRepository) HasSwiped(ctx context.Context, userID string, matchedUserID string) (model.Reaction, error) {
	ret := _m.Called(ctx, userID, matchedUserID)

	if len(ret) == 0 {
		panic("no return value specified for HasSwiped")
	}

	var r0 model.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.Reaction, error)); ok {
		return rf(ctx, userID, matchedUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.Reaction); ok {
		r0 = rf(ctx, userID, matchedUserID)
	} else {
		r0 = ret.Get(0).(model.Reaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, matchedUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, reaction
func (_m *IReactionRepository) Update(ctx context.Context, reaction *model.Reaction) error {
	ret := _m.Called(ctx, reaction)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Reaction) error); ok {
		r0 = rf(ctx, reaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIReactionRepository creates a new instance of IReactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIReactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IReactionRepository {
	mock := &IReactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
