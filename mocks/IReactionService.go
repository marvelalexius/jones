// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/marvelalexius/jones/model"
	mock "github.com/stretchr/testify/mock"
)

// IReactionService is an autogenerated mock type for the IReactionService type
type IReactionService struct {
	mock.Mock
}

// SeeLikes provides a mock function with given fields: ctx, userID
func (_m *IReactionService) SeeLikes(ctx context.Context, userID string) ([]model.Reaction, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for SeeLikes")
	}

	var r0 []model.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Reaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Reaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Reaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Swipe provides a mock function with given fields: ctx, reaction
func (_m *IReactionService) Swipe(ctx context.Context, reaction model.ReactionRequest) (model.Reaction, error) {
	ret := _m.Called(ctx, reaction)

	if len(ret) == 0 {
		panic("no return value specified for Swipe")
	}

	var r0 model.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ReactionRequest) (model.Reaction, error)); ok {
		return rf(ctx, reaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ReactionRequest) model.Reaction); ok {
		r0 = rf(ctx, reaction)
	} else {
		r0 = ret.Get(0).(model.Reaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ReactionRequest) error); ok {
		r1 = rf(ctx, reaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIReactionService creates a new instance of IReactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIReactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IReactionService {
	mock := &IReactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
