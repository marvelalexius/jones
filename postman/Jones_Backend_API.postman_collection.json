{
	"info": {
		"_postman_id": "906e90ba-81d9-4362-95e2-4a12833c82c4",
		"name": "Jones Backend API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3007360"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"console.log(res)\r",
							"pm.collectionVariables.set(\"auth_token\", res.data.user.token);\r",
							"pm.collectionVariables.set(\"refresh_token\", res.data.user.refresh_token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Test Z\",\r\n    \"email\": \"test+z@test.com\",\r\n    \"password\": \"testtest\",\r\n    \"bio\": \"ini test bio\",\r\n    \"gender\": \"MALE\",\r\n    \"preference\": \"FEMALE\",\r\n    \"date_of_birth\": \"2000-09-12\",\r\n    \"images\": [\r\n        \"https://dummyimage.com/600x400/000/fff\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/auth/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"console.log(res)\r",
							"pm.collectionVariables.set(\"auth_token\", res.data.user.token);\r",
							"pm.collectionVariables.set(\"refresh_token\", res.data.user.refresh_token)\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    const requiredFields = [\"id\", \"name\", \"email\", \"bio\", \"gender\", \"preference\", \"age\", \"created_at\", \"updated_at\", \"token\", \"refresh_token\"];\r",
							"    requiredFields.forEach(field => {\r",
							"        pm.expect(responseData.data.user).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.data.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token and refresh_token are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data.user.token).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"    pm.expect(responseData.data.user.refresh_token).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test+f@test.com\",\r\n    \"password\": \"testtest\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Refresh Auth Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"console.log(res)\r",
							"pm.collectionVariables.set(\"auth_token\", res.data.auth_token);\r",
							"pm.collectionVariables.set(\"refresh_token\", res.data.refresh_token);\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the expected structure and data types\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.be.a('string');\r",
							"  pm.expect(responseData.data).to.be.an('object');\r",
							"  pm.expect(responseData.data.auth_token).to.be.a('string');\r",
							"  pm.expect(responseData.data.refresh_token).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"refresh_token\": \"{{refresh_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/auth/refresh",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json()\r",
							"res.data.length == res.meta.total\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('name');\r",
							"        pm.expect(user).to.have.property('email');\r",
							"        pm.expect(user).to.have.property('bio');\r",
							"        pm.expect(user).to.have.property('gender');\r",
							"        pm.expect(user).to.have.property('preference');\r",
							"        pm.expect(user).to.have.property('age');\r",
							"        pm.expect(user).to.have.property('images');\r",
							"        pm.expect(user).to.have.property('created_at');\r",
							"        pm.expect(user).to.have.property('updated_at');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Images array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    \r",
							"    responseData.data.forEach(user => {\r",
							"        pm.expect(user.images).to.exist;\r",
							"        pm.expect(user.images).to.be.an('array');\r",
							"        pm.expect(user.images.length).to.be.above(0); // Expected number of elements\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate images array properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(user) {\r",
							"        user.images.forEach(function(image) {\r",
							"            pm.expect(image.url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"URL should not be empty\");\r",
							"            pm.expect(image.is_primary).to.be.a('boolean', \"is_primary should be a boolean value\");\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Likes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json()\r",
							"res.data.length == res.meta.total\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('name');\r",
							"        pm.expect(user).to.have.property('email');\r",
							"        pm.expect(user).to.have.property('bio');\r",
							"        pm.expect(user).to.have.property('gender');\r",
							"        pm.expect(user).to.have.property('preference');\r",
							"        pm.expect(user).to.have.property('age');\r",
							"        pm.expect(user).to.have.property('images');\r",
							"        pm.expect(user).to.have.property('created_at');\r",
							"        pm.expect(user).to.have.property('updated_at');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Images array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    \r",
							"    responseData.data.forEach(user => {\r",
							"        pm.expect(user.images).to.exist;\r",
							"        pm.expect(user.images).to.be.an('array');\r",
							"        pm.expect(user.images.length).to.be.above(0); // Expected number of elements\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate images array properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(user) {\r",
							"        user.images.forEach(function(image) {\r",
							"            pm.expect(image.url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"URL should not be empty\");\r",
							"            pm.expect(image.is_primary).to.be.a('boolean', \"is_primary should be a boolean value\");\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/reactions/likes",
					"host": [
						"{{host}}"
					],
					"path": [
						"reactions",
						"likes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reactions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data object has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.data).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.have.property('id');\r",
							"  pm.expect(responseData.data).to.have.property('user_id');\r",
							"  pm.expect(responseData.data).to.have.property('matched_user_id');\r",
							"  pm.expect(responseData.data).to.have.property('type');\r",
							"  pm.expect(responseData.data).to.have.property('created_at');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Matched_at, updated_at, and deleted_at fields are null or in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data.matched_at).to.be.oneOf([null, \"\"]);\r",
							"    pm.expect(responseData.data.updated_at).to.be.oneOf([null, \"\"]);\r",
							"    pm.expect(responseData.data.deleted_at).to.be.oneOf([null, \"\"]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"matched_user_id\": \"01JBKWFX1S3PKD6QD3S6MBJZAD\",\r\n    \"type\": \"LIKE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/reactions",
					"host": [
						"{{host}}"
					],
					"path": [
						"reactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Subscribe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"plan_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/subscription",
					"host": [
						"{{host}}"
					],
					"path": [
						"subscription"
					]
				}
			},
			"response": []
		},
		{
			"name": "Manage Subscription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/subscription/manage",
					"host": [
						"{{host}}"
					],
					"path": [
						"subscription",
						"manage"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		}
	]
}